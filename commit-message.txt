feat: Implement tensor named dimensions support

Add support for named tensor dimensions following libtorch's implementation.
This allows for more semantic clarity in tensor operations by providing
meaningful names to tensor dimensions.

Core Implementation:
1. Named Dimensions Infrastructure
- Add Dimname type with support for basic and wildcard names
- Implement C++ wrappers for libtorch's named tensor functionality
- Add memory management and proper finalizer handling for dimension names

2. Tensor Methods
- Add SetNames method to assign names to tensor dimensions
- Add Names method to retrieve current dimension names
- Ensure proper memory handling between C++ and Go layers

3. Core Features
- Support for basic dimension names
- Support for wildcard dimensions ("*")
- Proper dimension name validation
- Memory-safe handling of dimension names

Testing:
- Basic dimension name creation and validation
- 2D tensor dimension naming
- 3D tensor dimension naming
- Empty tensor dimension naming
- Wildcard dimension support
- Memory management verification

Technical Details:
- Integration with libtorch's at::Dimname system
- Proper C++/Go boundary handling through cgotorch
- Memory safety through Go finalizers
- Consistent error handling through MustNil pattern

Note: Named tensors are marked as experimental in libtorch, and this
implementation maintains compatibility with that status while providing
a stable API for Go users.

Example usage:
```go
tensor := torch.NewTensor([][]float32{{1, 2}, {3, 4}})
batch := torch.NewDimname("batch", false)
features := torch.NewDimname("features", false)
namedTensor := tensor.SetNames(batch, features)

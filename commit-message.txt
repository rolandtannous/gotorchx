feat: Implement named dimension support for tensor concatenation

Add support for tensor concatenation using named dimensions (cat.names),
extending the existing concatenation functionality with semantic dimension naming.

Core Implementation:
1. Named Concatenation Functions
- Add CatWithNames for concatenating tensors along named dimensions
- Add CatWithNamesOut for memory-efficient named dimension concatenation
- Implement proper C++ wrappers for libtorch's named tensor cat operations

2. Integration with Named Dimensions
- Maintain dimension name propagation during concatenation
- Preserve name ordering in resulting tensors
- Handle dimension name validation and matching

Testing:
- Basic named dimension concatenation verification
- Shape and value correctness testing
- Dimension name preservation testing
- Multiple dimension concatenation scenarios
- Explicit value verification without relying on AllClose
- Individual element access validation

Technical Details:
- Direct integration with libtorch's at::cat operations
- Proper handling of C++/Go type conversions for named dimensions
- Memory management for named tensor operations
- Explicit testing without workarounds for named tensor limitations

Example usage:
```go
a := tensor.SetNames(
    NewDimname("batch", false),
    NewDimname("features", false),
)
b := tensor.SetNames(
    NewDimname("batch", false),
    NewDimname("features", false),
)
result := CatWithNames([]Tensor{a, b}, NewDimname("batch", false))
